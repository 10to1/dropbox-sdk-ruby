var search_data = {"index":{"searchIndex":["dropboxautherror","dropboxcli","dropboxclient","chunkeduploader","dropboxcontroller","dropboxerror","dropboxnotmodified","dropboxoauth2flow","badrequesterror","badstateerror","csrferror","notapprovederror","providererror","dropboxoauth2flownoredirect","gem","node","object","rack","session","sdktest","ssltest","account_info()","add_copy_ref()","apply_delta()","assert_file()","assert_get()","assert_metadata()","assert_put()","auth_finish()","auth_start()","clean_up()","command_copy()","command_find()","command_link()","command_list()","command_loop()","command_reset()","command_update()","commit_chunked_upload()","cp()","create_copy_ref()","create_oauth2_access_token()","delta()","disable_access_token()","execute_dropbox_command()","file_copy()","file_create_folder()","file_delete()","file_move()","finish()","finish()","finish()","folder?()","from_json()","from_json_content()","get()","get_chunked_uploader()","get_dropbox_client()","get_dropbox_client()","get_file()","get_file_and_metadata()","get_or_create_child()","get_web_auth()","get_web_auth()","hash_has()","help()","html_page()","info()","load_state()","login()","logout()","ls()","main()","main()","map_hash_values()","media()","metadata()","mkdir()","mv()","new()","new()","new()","new()","new()","new()","new()","open_binary()","partial_chunked_upload()","put()","put_file()","render_file()","render_folder()","restore()","revisions()","rm()","save_state()","search()","search()","search_tree()","setup()","setup()","shares()","split_path()","start()","start()","teardown()","teardown()","test_chunked_upload()","test_copy()","test_copy_ref()","test_create_folder()","test_delete()","test_delta()","test_dropbox_connection()","test_gets()","test_hostname_validation()","test_invalid_certificate()","test_metadatas()","test_move()","test_puts()","test_revisions_restore()","test_search()","test_share()","test_stream()","test_valid_certificate()","thumbnail()","thumbnail()","thumbnail_and_metadata()","to_json()","to_json_content()","to_s()","upload()","upload()","upload()","changelog","license","readme","created.rid","trusted-certs.crt"],"longSearchIndex":["dropboxautherror","dropboxcli","dropboxclient","dropboxclient::chunkeduploader","dropboxcontroller","dropboxerror","dropboxnotmodified","dropboxoauth2flow","dropboxoauth2flow::badrequesterror","dropboxoauth2flow::badstateerror","dropboxoauth2flow::csrferror","dropboxoauth2flow::notapprovederror","dropboxoauth2flow::providererror","dropboxoauth2flownoredirect","gem","node","object","rack","rack::session","sdktest","ssltest","dropboxclient#account_info()","dropboxclient#add_copy_ref()","object#apply_delta()","sdktest#assert_file()","sdktest#assert_get()","sdktest#assert_metadata()","sdktest#assert_put()","dropboxcontroller#auth_finish()","dropboxcontroller#auth_start()","dropboxcli#clean_up()","object#command_copy()","object#command_find()","object#command_link()","object#command_list()","dropboxcli#command_loop()","object#command_reset()","object#command_update()","dropboxclient#commit_chunked_upload()","dropboxcli#cp()","dropboxclient#create_copy_ref()","dropboxclient#create_oauth2_access_token()","dropboxclient#delta()","dropboxclient#disable_access_token()","dropboxcli#execute_dropbox_command()","dropboxclient#file_copy()","dropboxclient#file_create_folder()","dropboxclient#file_delete()","dropboxclient#file_move()","dropboxclient::chunkeduploader#finish()","dropboxoauth2flow#finish()","dropboxoauth2flownoredirect#finish()","node#folder?()","node::from_json()","node::from_json_content()","dropboxcli#get()","dropboxclient#get_chunked_uploader()","dropboxcontroller#get_dropbox_client()","object#get_dropbox_client()","dropboxclient#get_file()","dropboxclient#get_file_and_metadata()","object#get_or_create_child()","dropboxcontroller#get_web_auth()","object#get_web_auth()","sdktest#hash_has()","dropboxcli#help()","object#html_page()","dropboxcli#info()","object#load_state()","dropboxcli#login()","dropboxcli#logout()","dropboxcli#ls()","dropboxcontroller#main()","object#main()","object#map_hash_values()","dropboxclient#media()","dropboxclient#metadata()","dropboxcli#mkdir()","dropboxcli#mv()","dropboxcli::new()","dropboxclient::new()","dropboxclient::chunkeduploader::new()","dropboxerror::new()","dropboxoauth2flow::new()","dropboxoauth2flownoredirect::new()","node::new()","sdktest#open_binary()","dropboxclient#partial_chunked_upload()","dropboxcli#put()","dropboxclient#put_file()","object#render_file()","object#render_folder()","dropboxclient#restore()","dropboxclient#revisions()","dropboxcli#rm()","object#save_state()","dropboxcli#search()","dropboxclient#search()","object#search_tree()","sdktest#setup()","ssltest#setup()","dropboxclient#shares()","object#split_path()","dropboxoauth2flow#start()","dropboxoauth2flownoredirect#start()","sdktest#teardown()","ssltest#teardown()","sdktest#test_chunked_upload()","sdktest#test_copy()","sdktest#test_copy_ref()","sdktest#test_create_folder()","sdktest#test_delete()","sdktest#test_delta()","ssltest#test_dropbox_connection()","sdktest#test_gets()","ssltest#test_hostname_validation()","ssltest#test_invalid_certificate()","sdktest#test_metadatas()","sdktest#test_move()","sdktest#test_puts()","sdktest#test_revisions_restore()","sdktest#test_search()","sdktest#test_share()","sdktest#test_stream()","ssltest#test_valid_certificate()","dropboxcli#thumbnail()","dropboxclient#thumbnail()","dropboxclient#thumbnail_and_metadata()","node#to_json()","node::to_json_content()","dropboxerror#to_s()","dropboxclient::chunkeduploader#upload()","dropboxcontroller#upload()","sdktest#upload()","","","","",""],"info":[["DropboxAuthError","","DropboxAuthError.html","","<p>This is the error raised on Authentication failures.  Usually this means\none of three things\n<p>Your user …\n"],["DropboxCLI","","DropboxCLI.html","",""],["DropboxClient","","DropboxClient.html","","<p>Use this class to make Dropbox API calls.  You&#39;ll need to obtain an\nOAuth 2 access token first; you …\n"],["DropboxClient::ChunkedUploader","","DropboxClient/ChunkedUploader.html","","<p>ChunkedUploader is responsible for uploading a large file to Dropbox in\nsmaller chunks. This allows large …\n"],["DropboxController","","DropboxController.html","",""],["DropboxError","","DropboxError.html","","<p>This is the usual error raised on any Dropbox related Errors\n"],["DropboxNotModified","","DropboxNotModified.html","","<p>This is raised when you call metadata with a hash and that hash matches See\ndocumentation in metadata …\n"],["DropboxOAuth2Flow","","DropboxOAuth2Flow.html","","<p>The standard OAuth 2 authorization helper.  Use this if you&#39;re writing\na web app.\n"],["DropboxOAuth2Flow::BadRequestError","","DropboxOAuth2Flow/BadRequestError.html","","<p>Thrown if the redirect URL was missing parameters or if the given\nparameters were not valid.\n<p>The recommended …\n"],["DropboxOAuth2Flow::BadStateError","","DropboxOAuth2Flow/BadStateError.html","","<p>Thrown if all the parameters are correct, but there&#39;s no CSRF token in\nthe session.  This probably …\n"],["DropboxOAuth2Flow::CsrfError","","DropboxOAuth2Flow/CsrfError.html","","<p>Thrown if the given &#39;state&#39; parameter doesn&#39;t contain the CSRF\ntoken from the user&#39;s …\n"],["DropboxOAuth2Flow::NotApprovedError","","DropboxOAuth2Flow/NotApprovedError.html","","<p>The user chose not to approve your app.\n"],["DropboxOAuth2Flow::ProviderError","","DropboxOAuth2Flow/ProviderError.html","","<p>Dropbox redirected to your redirect URI with some unexpected error\nidentifier and error message.\n"],["DropboxOAuth2FlowNoRedirect","","DropboxOAuth2FlowNoRedirect.html","","<p>OAuth 2 authorization helper for apps that can&#39;t provide a redirect URI\n(such as the command line …\n"],["Gem","","Gem.html","",""],["Node","","Node.html","","<p>We track folder state as a tree of Node objects.\n"],["Object","","Object.html","",""],["Rack","","Rack.html","",""],["Rack::Session","","Rack/Session.html","",""],["SDKTest","","SDKTest.html","",""],["SSLTest","","SSLTest.html","",""],["account_info","DropboxClient","DropboxClient.html#method-i-account_info","()","<p>Returns some information about the current user&#39;s Dropbox account (the\n“current user” is …\n"],["add_copy_ref","DropboxClient","DropboxClient.html#method-i-add_copy_ref","(to_path, copy_ref)","<p>Adds the file referenced by the copy ref to the specified path\n<p>Args:\n<p><code>copy_ref</code>: A copy ref string that was …\n"],["apply_delta","Object","Object.html#method-i-apply_delta","(root, e)",""],["assert_file","SDKTest","SDKTest.html#method-i-assert_file","(file, metadata, options={}, *more)",""],["assert_get","SDKTest","SDKTest.html#method-i-assert_get","(file, path)",""],["assert_metadata","SDKTest","SDKTest.html#method-i-assert_metadata","(file, path)",""],["assert_put","SDKTest","SDKTest.html#method-i-assert_put","(file, path)",""],["auth_finish","DropboxController","DropboxController.html#method-i-auth_finish","()",""],["auth_start","DropboxController","DropboxController.html#method-i-auth_start","()",""],["clean_up","DropboxCLI","DropboxCLI.html#method-i-clean_up","(str)",""],["command_copy","Object","Object.html#method-i-command_copy","(args)",""],["command_find","Object","Object.html#method-i-command_find","(args)",""],["command_link","Object","Object.html#method-i-command_link","(args)",""],["command_list","Object","Object.html#method-i-command_list","(args)",""],["command_loop","DropboxCLI","DropboxCLI.html#method-i-command_loop","()",""],["command_reset","Object","Object.html#method-i-command_reset","(args)",""],["command_update","Object","Object.html#method-i-command_update","(args)",""],["commit_chunked_upload","DropboxClient","DropboxClient.html#method-i-commit_chunked_upload","(to_path, upload_id, overwrite=false, parent_rev=nil)",""],["cp","DropboxCLI","DropboxCLI.html#method-i-cp","(command)",""],["create_copy_ref","DropboxClient","DropboxClient.html#method-i-create_copy_ref","(path)","<p>Creates and returns a copy ref for a specific file.  The copy ref can be\nused to instantly copy that …\n"],["create_oauth2_access_token","DropboxClient","DropboxClient.html#method-i-create_oauth2_access_token","()","<p>If this <code>DropboxClient</code> was created with an OAuth 1 access\ntoken, this method can be used to create an …\n"],["delta","DropboxClient","DropboxClient.html#method-i-delta","(cursor=nil, path_prefix=nil)","<p>A way of letting you keep a local representation of the Dropbox folder\nheirarchy.  You can periodically …\n"],["disable_access_token","DropboxClient","DropboxClient.html#method-i-disable_access_token","()","<p>Disables the access token that this <code>DropboxClient</code> is using. \nIf this call succeeds, further API calls …\n"],["execute_dropbox_command","DropboxCLI","DropboxCLI.html#method-i-execute_dropbox_command","(cmd_line)",""],["file_copy","DropboxClient","DropboxClient.html#method-i-file_copy","(from_path, to_path)","<p>Copy a file or folder to a new location.\n<p>Args:\n<p><code>from_path</code>: The path to the file or folder to be copied. …\n"],["file_create_folder","DropboxClient","DropboxClient.html#method-i-file_create_folder","(path)","<p>Create a folder.\n<p>Arguments:\n<p><code>path</code>: The path of the new folder.\n"],["file_delete","DropboxClient","DropboxClient.html#method-i-file_delete","(path)","<p>Deletes a file\n<p>Arguments:\n<p><code>path</code>: The path of the file to delete\n"],["file_move","DropboxClient","DropboxClient.html#method-i-file_move","(from_path, to_path)","<p>Moves a file\n<p>Arguments:\n<p><code>from_path</code>: The path of the file to be moved\n"],["finish","DropboxClient::ChunkedUploader","DropboxClient/ChunkedUploader.html#method-i-finish","(to_path, overwrite=false, parent_rev=nil)","<p>Completes a file upload\n<p>Args:\n<p><code>to_path</code>: The directory path to upload the file to. If the\ndestination directory …\n"],["finish","DropboxOAuth2Flow","DropboxOAuth2Flow.html#method-i-finish","(query_params)","<p>Call this after the user has visited the authorize URL (see: start()),\napproved your app, and was redirected …\n"],["finish","DropboxOAuth2FlowNoRedirect","DropboxOAuth2FlowNoRedirect.html#method-i-finish","(code)","<p>If the user approves your app, they will be presented with an\n“authorization code”. Have the …\n"],["folder?","Node","Node.html#method-i-folder-3F","()",""],["from_json","Node","Node.html#method-c-from_json","(jnode)",""],["from_json_content","Node","Node.html#method-c-from_json_content","(jcontent)",""],["get","DropboxCLI","DropboxCLI.html#method-i-get","(command)",""],["get_chunked_uploader","DropboxClient","DropboxClient.html#method-i-get_chunked_uploader","(file_obj, total_size)","<p>Returns a ChunkedUploader object.\n<p>Args:\n<p><code>file_obj</code>: The file-like object to be uploaded.  Must support\n.read() …\n"],["get_dropbox_client","DropboxController","DropboxController.html#method-i-get_dropbox_client","()",""],["get_dropbox_client","Object","Object.html#method-i-get_dropbox_client","()","<p>If we already have an authorized DropboxSession, returns a DropboxClient.\n"],["get_file","DropboxClient","DropboxClient.html#method-i-get_file","(from_path, rev=nil)","<p>Download a file\n<p>Args:\n<p><code>from_path</code>: The path to the file to be downloaded\n"],["get_file_and_metadata","DropboxClient","DropboxClient.html#method-i-get_file_and_metadata","(from_path, rev=nil)","<p>Download a file and get its metadata.\n<p>Args:\n<p><code>from_path</code>: The path to the file to be downloaded\n"],["get_or_create_child","Object","Object.html#method-i-get_or_create_child","(children, name)",""],["get_web_auth","DropboxController","DropboxController.html#method-i-get_web_auth","()",""],["get_web_auth","Object","Object.html#method-i-get_web_auth","()","<p>OAuth stuff\n"],["hash_has","SDKTest","SDKTest.html#method-i-hash_has","(dict, options={}, *more)",""],["help","DropboxCLI","DropboxCLI.html#method-i-help","()",""],["html_page","Object","Object.html#method-i-html_page","(title, body='')",""],["info","DropboxCLI","DropboxCLI.html#method-i-info","(command)",""],["load_state","Object","Object.html#method-i-load_state","()",""],["login","DropboxCLI","DropboxCLI.html#method-i-login","()",""],["logout","DropboxCLI","DropboxCLI.html#method-i-logout","(command)",""],["ls","DropboxCLI","DropboxCLI.html#method-i-ls","(command)",""],["main","DropboxController","DropboxController.html#method-i-main","()",""],["main","Object","Object.html#method-i-main","()",""],["map_hash_values","Object","Object.html#method-i-map_hash_values","(h)","<p>Run a mapping function over every value in a Hash, returning a new Hash.\n"],["media","DropboxClient","DropboxClient.html#method-i-media","(path)","<p>Returns a direct link to a media file All of Dropbox&#39;s API methods\nrequire OAuth, which may cause …\n"],["metadata","DropboxClient","DropboxClient.html#method-i-metadata","(path, file_limit=25000, list=true, hash=nil, rev=nil, include_deleted=false)","<p>Retrives metadata for a file or folder\n<p>Arguments:\n<p>path: The path to the file or folder.\n"],["mkdir","DropboxCLI","DropboxCLI.html#method-i-mkdir","(command)",""],["mv","DropboxCLI","DropboxCLI.html#method-i-mv","(command)",""],["new","DropboxCLI","DropboxCLI.html#method-c-new","()",""],["new","DropboxClient","DropboxClient.html#method-c-new","(oauth2_access_token, root=\"auto\", locale=nil)","<p>Args:\n<p><code>oauth2_access_token</code>: Obtained via DropboxOAuth2Flow or\nDropboxOAuth2FlowNoRedirect.\n<p><code>locale</code>: The user&#39;s …\n"],["new","DropboxClient::ChunkedUploader","DropboxClient/ChunkedUploader.html#method-c-new","(client, file_obj, total_size)",""],["new","DropboxError","DropboxError.html#method-c-new","(error, http_response=nil, user_error=nil)",""],["new","DropboxOAuth2Flow","DropboxOAuth2Flow.html#method-c-new","(consumer_key, consumer_secret, redirect_uri, session, csrf_token_session_key, locale=nil)","<p>consumer_key: Your Dropbox API app&#39;s “app key”\n<p>consumer_secret: Your Dropbox API app&#39;s …\n"],["new","DropboxOAuth2FlowNoRedirect","DropboxOAuth2FlowNoRedirect.html#method-c-new","(consumer_key, consumer_secret, locale=nil)","<p>consumer_key: Your Dropbox API app&#39;s “app key”\n<p>consumer_secret: Your Dropbox API app&#39;s …\n"],["new","Node","Node.html#method-c-new","(path, content)",""],["open_binary","SDKTest","SDKTest.html#method-i-open_binary","(filename)",""],["partial_chunked_upload","DropboxClient","DropboxClient.html#method-i-partial_chunked_upload","(data, upload_id=nil, offset=nil)",""],["put","DropboxCLI","DropboxCLI.html#method-i-put","(command)",""],["put_file","DropboxClient","DropboxClient.html#method-i-put_file","(to_path, file_obj, overwrite=false, parent_rev=nil)","<p>Uploads a file to a server.  This uses the HTTP PUT upload method for\nsimplicity\n<p>Args:\n<p><code>to_path</code>: The directory …\n"],["render_file","Object","Object.html#method-i-render_file","(client, entry)",""],["render_folder","Object","Object.html#method-i-render_folder","(client, entry)",""],["restore","DropboxClient","DropboxClient.html#method-i-restore","(path, rev)","<p>Restore a file to a previous revision.\n<p>Arguments:\n<p>path: The file to restore. Note that folders can&#39;t …\n"],["revisions","DropboxClient","DropboxClient.html#method-i-revisions","(path, rev_limit=1000)","<p>Retrive revisions of a file\n<p>Arguments:\n<p>path: The file to fetch revisions for. Note that revisions are not …\n"],["rm","DropboxCLI","DropboxCLI.html#method-i-rm","(command)",""],["save_state","Object","Object.html#method-i-save_state","(state)",""],["search","DropboxCLI","DropboxCLI.html#method-i-search","(command)",""],["search","DropboxClient","DropboxClient.html#method-i-search","(path, query, file_limit=1000, include_deleted=false)","<p>Search directory for filenames matching query\n<p>Arguments:\n<p>path: The directory to search within\n"],["search_tree","Object","Object.html#method-i-search_tree","(results, tree, term)","<p>Recursively search &#39;tree&#39; for files that contain the string in\n&#39;term&#39;. Print out any …\n"],["setup","SDKTest","SDKTest.html#method-i-setup","()","<p>Called before every test method runs. Can be used to set up fixture\ninformation.\n"],["setup","SSLTest","SSLTest.html#method-i-setup","()","<p>Called before every test method runs. Can be used to set up fixture\ninformation.\n"],["shares","DropboxClient","DropboxClient.html#method-i-shares","(path)","<p>Get a URL to share a media file Shareable links created on Dropbox are\ntime-limited, but don&#39;t require …\n"],["split_path","Object","Object.html#method-i-split_path","(path)",""],["start","DropboxOAuth2Flow","DropboxOAuth2Flow.html#method-i-start","(url_state=nil)","<p>Starts the OAuth 2 authorizaton process, which involves redirecting the\nuser to the returned “authorization …\n"],["start","DropboxOAuth2FlowNoRedirect","DropboxOAuth2FlowNoRedirect.html#method-i-start","()","<p>Returns a authorization_url, which is a page on Dropbox&#39;s website. \nHave the user visit this URL …\n"],["teardown","SDKTest","SDKTest.html#method-i-teardown","()",""],["teardown","SSLTest","SSLTest.html#method-i-teardown","()",""],["test_chunked_upload","SDKTest","SDKTest.html#method-i-test_chunked_upload","()",""],["test_copy","SDKTest","SDKTest.html#method-i-test_copy","()",""],["test_copy_ref","SDKTest","SDKTest.html#method-i-test_copy_ref","()",""],["test_create_folder","SDKTest","SDKTest.html#method-i-test_create_folder","()",""],["test_delete","SDKTest","SDKTest.html#method-i-test_delete","()",""],["test_delta","SDKTest","SDKTest.html#method-i-test_delta","()",""],["test_dropbox_connection","SSLTest","SSLTest.html#method-i-test_dropbox_connection","()","<p>Connection to Dropbox API Should not raise exceptions\n"],["test_gets","SDKTest","SDKTest.html#method-i-test_gets","()","<p>Fake test\n"],["test_hostname_validation","SSLTest","SSLTest.html#method-i-test_hostname_validation","()","<p>Connection to a host that presents a certificate for invalid hostname\nShould raise DropboxError exception …\n"],["test_invalid_certificate","SSLTest","SSLTest.html#method-i-test_invalid_certificate","()","<p>Connection to a host with a disallowed certificate Should raise\nDropboxError exception of the type &#39;SSL …\n"],["test_metadatas","SDKTest","SDKTest.html#method-i-test_metadatas","()",""],["test_move","SDKTest","SDKTest.html#method-i-test_move","()",""],["test_puts","SDKTest","SDKTest.html#method-i-test_puts","()",""],["test_revisions_restore","SDKTest","SDKTest.html#method-i-test_revisions_restore","()",""],["test_search","SDKTest","SDKTest.html#method-i-test_search","()",""],["test_share","SDKTest","SDKTest.html#method-i-test_share","()",""],["test_stream","SDKTest","SDKTest.html#method-i-test_stream","()",""],["test_valid_certificate","SSLTest","SSLTest.html#method-i-test_valid_certificate","()","<p>Connection to a host with an allowed certificate Should raise DropboxError\nexception but not of the type …\n"],["thumbnail","DropboxCLI","DropboxCLI.html#method-i-thumbnail","(command)","<p>Example: &gt; thumbnail pic1.jpg ~/pic1-local.jpg large\n"],["thumbnail","DropboxClient","DropboxClient.html#method-i-thumbnail","(from_path, size='large')","<p>Download a thumbnail for an image.\n<p>Arguments:\n<p>from_path: The path to the file to be thumbnailed.\n"],["thumbnail_and_metadata","DropboxClient","DropboxClient.html#method-i-thumbnail_and_metadata","(from_path, size='large')","<p>Download a thumbnail for an image along with the image&#39;s metadata.\n<p>Arguments:\n<p>from_path: The path to …\n"],["to_json","Node","Node.html#method-i-to_json","()",""],["to_json_content","Node","Node.html#method-c-to_json_content","(content)",""],["to_s","DropboxError","DropboxError.html#method-i-to_s","()",""],["upload","DropboxClient::ChunkedUploader","DropboxClient/ChunkedUploader.html#method-i-upload","(chunk_size=4*1024*1024)","<p>Uploads data from this ChunkedUploader&#39;s file_obj in chunks, until an\nerror occurs. Throws an exception …\n"],["upload","DropboxController","DropboxController.html#method-i-upload","()",""],["upload","SDKTest","SDKTest.html#method-i-upload","(filename, path, overwrite=false, parent_rev=nil)",""],["CHANGELOG","","CHANGELOG.html","","<p>1.6.4 (2014-4-12)\n<p>Bugfixes\n<p>Update gemspec to include all examples\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2009-2011 Dropbox Inc., www.dropbox.com/\n<p>Permission is hereby granted, free of charge, to …\n"],["README","","README.html","","<p>Dropbox Core SDK for Ruby\n<p>A Ruby library that for Dropbox&#39;s HTTP-based Core API.\n\n<pre>https://www.dropbox.com/developers/core/docs</pre>\n"],["created.rid","","doc/created_rid.html","",""],["trusted-certs.crt","","lib/trusted-certs_crt.html","","<p># DigiCert Assured ID Root CA.pem # Certificate: #     Data: #        \nVersion: 3 (0x2) #         Serial …\n"]]}}